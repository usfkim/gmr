import{a as u,b as f,c as I,d as R,e as W}from"./chunk-5NUV6MSK.js";import{r as j}from"./chunk-VNBHRZ5R.js";import{Na as L,Oa as F,Pa as U,Qa as V,Ra as $,Sa as H,T as O,Ta as B,Xa as q,_a as M,d as s,j as T,m as p,n as h,p as l,q as x,r as y}from"./chunk-OBJ3TPWI.js";var Q=[{path:"",redirectTo:"",pathMatch:"full"},{path:"",loadChildren:()=>import("./chunk-SYVBZQFU.js").then(a=>a.HomeModule)},{path:"about",loadChildren:()=>import("./chunk-YE5VI5RW.js").then(a=>a.AboutModule)},{path:"search-practitioners",loadChildren:()=>import("./chunk-XH4V5RIJ.js").then(a=>a.SearchPractitionersModule)},{path:"verification-portal",loadChildren:()=>import("./chunk-H7ZD6AQM.js").then(a=>a.VerificationPortalModule)},{path:"licensing-info",loadChildren:()=>import("./chunk-U76DSR34.js").then(a=>a.LicensingInfoModule)},{path:"news",loadChildren:()=>import("./chunk-BPD2CGLK.js").then(a=>a.NewsUpdatesModule)},{path:"contact-us",loadChildren:()=>import("./chunk-RIVZM4PN.js").then(a=>a.ContactUsModule)},{path:"",loadChildren:()=>import("./chunk-5L7WXPCQ.js").then(a=>a.AuthenticationModule)},{path:"dashboard",loadChildren:()=>import("./chunk-44YCCDSS.js").then(a=>a.PractitionerDashboardModule)},{path:"government",loadChildren:()=>import("./chunk-IC3GX6VZ.js").then(a=>a.GovernmentPortalModule)},{path:"employer",loadChildren:()=>import("./chunk-KK2ZOUY2.js").then(a=>a.EmployerPortalModule)},{path:"embassy",loadChildren:()=>import("./chunk-R4WYZJNG.js").then(a=>a.EmbassyPortalModule)},{path:"facility",loadChildren:()=>import("./chunk-J7EH52JW.js").then(a=>a.FacilityPortalModule)},{path:"public-verification",loadChildren:()=>import("./chunk-FVB3MVQC.js").then(a=>a.PublicVerificationModule)},{path:"analytics",loadChildren:()=>import("./chunk-I4SWL2L2.js").then(a=>a.AnalyticsModule)},{path:"country-map",loadChildren:()=>import("./chunk-UR75KO3A.js").then(a=>a.ContentTrustModule)},{path:"case-studies",loadChildren:()=>import("./chunk-UR75KO3A.js").then(a=>a.ContentTrustModule)},{path:"stakeholder-logos",loadChildren:()=>import("./chunk-UR75KO3A.js").then(a=>a.ContentTrustModule)},{path:"media-kit",loadChildren:()=>import("./chunk-UR75KO3A.js").then(a=>a.ContentTrustModule)},{path:"api-docs",loadChildren:()=>import("./chunk-UR75KO3A.js").then(a=>a.ContentTrustModule)},{path:"accessibility",loadChildren:()=>import("./chunk-UR75KO3A.js").then(a=>a.ContentTrustModule)},{path:"mfa-challenge",loadChildren:()=>import("./chunk-JEPTHUSC.js").then(a=>a.SecurityModule)},{path:"access-denied",loadChildren:()=>import("./chunk-JEPTHUSC.js").then(a=>a.SecurityModule)}],A=class a{static \u0275fac=function(t){return new(t||a)};static \u0275mod=y({type:a});static \u0275inj=h({imports:[M.forRoot(Q),M]})};var k=class a{title="Medical-Registry";static \u0275fac=function(t){return new(t||a)};static \u0275cmp=x({type:a,selectors:[["app-root"]],decls:1,vars:0,template:function(t,i){t&1&&O(0,"router-outlet")},dependencies:[q]})};var E=class a{auditService=l(u);encryptionService=l(I);dlpService=l(R);intercept(e,t){let i=e.clone({setHeaders:{"X-Content-Type-Options":"nosniff","X-Frame-Options":"DENY","X-XSS-Protection":"1; mode=block","Strict-Transport-Security":"max-age=31536000; includeSubDomains","Content-Security-Policy":"default-src 'self'; script-src 'self' 'unsafe-inline'; style-src 'self' 'unsafe-inline'","X-Request-ID":this.generateRequestId(),"X-User-Agent-Fingerprint":this.getUserAgentFingerprint()}}),r=Date.now();return t.handle(i).pipe(T({next:n=>s(this,null,function*(){n instanceof F&&(yield this.handleResponse(i,n,r))}),error:n=>s(this,null,function*(){yield this.handleError(i,n,r)})}))}handleResponse(e,t,i){return s(this,null,function*(){let r=Date.now()-i,n=this.getCurrentUser();n&&(this.isDataAccessRequest(e)&&(yield this.auditService.logDataAccess(n.id,this.extractResourceType(e.url),this.extractResourceId(e.url),this.mapHttpMethodToAccessType(e.method),e.headers.get("X-Access-Reason")||"No reason provided")),this.containsSensitiveData(t.body)&&(yield this.applyDlpControls(e,t,n)),r>5e3&&console.warn(`Slow request detected: ${e.url} took ${r}ms`))})}handleError(e,t,i){return s(this,null,function*(){let r=this.getCurrentUser(),n=Date.now()-i;r&&(yield this.auditService.logAdminAction(r.id,r.role,"API_ERROR","http_request",e.url,!1,`HTTP ${t.status}: ${t.message}`,{method:e.method,duration:n,errorCode:t.status,errorMessage:t.message})),(t.status===401||t.status===403)&&console.warn(`Security-relevant error: ${t.status} for ${e.url}`)})}applyDlpControls(e,t,i){return s(this,null,function*(){if(this.isExportRequest(e)){let r=yield this.dlpService.applyWatermark(new Blob([JSON.stringify(t.body)]),i.id,new Date,this.getDataClassification(t.body));console.log("DLP watermark applied to exported data")}yield this.auditService.logDataAccess(i.id,this.extractResourceType(e.url),this.extractResourceId(e.url),this.mapHttpMethodToAccessType(e.method),e.headers.get("X-Access-Reason")||"API access")})}isDataAccessRequest(e){return["/practitioners","/facilities","/investigations","/audit-logs"].some(i=>e.url.includes(i))}isExportRequest(e){let t=e.headers.get("Accept");return e.url.includes("/export")||t?.includes("text/csv")||!1||t?.includes("application/pdf")||!1}containsSensitiveData(e){if(!e)return!1;let t=["nationalId","dateOfBirth","medicalHistory","investigationNotes"],i=JSON.stringify(e).toLowerCase();return t.some(r=>i.includes(r.toLowerCase()))}extractResourceType(e){return e.includes("/practitioners")?"practitioner":e.includes("/facilities")?"facility":e.includes("/investigations")?"investigation":e.includes("/audit-logs")?"audit_log":"unknown"}extractResourceId(e){let t=e.match(/\/([^\/]+)$/);return t?t[1]:"unknown"}mapHttpMethodToAccessType(e){switch(e.toUpperCase()){case"GET":return"view";case"POST":return"export";default:return"view"}}getDataClassification(e){return this.containsRestrictedData(e)?"RESTRICTED":this.containsConfidentialData(e)?"CONFIDENTIAL":"INTERNAL"}containsRestrictedData(e){let t=["investigationNotes","disciplinaryRecords","financialData"],i=JSON.stringify(e).toLowerCase();return t.some(r=>i.includes(r.toLowerCase()))}containsConfidentialData(e){let t=["nationalId","dateOfBirth","medicalHistory","personalAddress"],i=JSON.stringify(e).toLowerCase();return t.some(r=>i.includes(r.toLowerCase()))}getCurrentUser(){let e=localStorage.getItem("currentUser");return e?JSON.parse(e):null}generateRequestId(){return"REQ_"+Date.now()+"_"+Math.random().toString(36).substr(2,9)}getUserAgentFingerprint(){let e=navigator.userAgent,t=0;for(let i=0;i<e.length;i++){let r=e.charCodeAt(i);t=(t<<5)-t+r,t=t&t}return t.toString(16)}static \u0275fac=function(t){return new(t||a)};static \u0275prov=p({token:a,factory:a.\u0275fac})};var v=class a{blockchainService=l(f);encryptionService=l(I);auditService=l(u);createOnboardingApplication(e){return s(this,null,function*(){let t=this.generateApplicationId(),i=yield this.encryptionService.encryptObject(e.personalInfo),r={id:t,applicantId:e.userId,status:"draft",personalInfo:i,professionalInfo:e.professionalInfo,documents:[],kycStatus:"pending",paymentStatus:"pending",reviewNotes:[],submittedDate:new Date};return yield this.auditService.logAdminAction(e.userId,"applicant","APPLICATION_CREATED","onboarding",t,!0,"New practitioner onboarding application created"),r})}performKycVerification(e){return s(this,null,function*(){let t=yield this.getApplication(e),i=yield this.encryptionService.decryptObject(t.personalInfo),r=yield Promise.all([this.verifyNationalId(i.nationalId),this.checkSanctionsList(i.firstName,i.lastName),this.verifyAge(i.dateOfBirth),this.checkDuplicateRegistration(i.nationalId,i.email)]),n=this.calculateKycScore(r),o=r.filter(d=>!d.passed).map(d=>d.reason||"Unknown issue"),c=n<80||o.length>0;return t.kycStatus=c?"pending":"verified",yield this.auditService.logAdminAction("SYSTEM","kyc_service","KYC_VERIFICATION_COMPLETED","onboarding",e,!0,`KYC Score: ${n}, Manual Review: ${c}`,{kycScore:n,issues:o,requiresManualReview:c}),{success:n>=60,kycScore:n,issues:o,requiresManualReview:c}})}uploadDocument(e,t,i){return s(this,null,function*(){let r=yield this.generateFileHash(i),n=yield this.checkDocumentDuplicates(r),o={id:this.generateDocumentId(),type:t,name:i.name,uploadDate:new Date,status:"uploaded",integrityHash:r,duplicateCheck:!n.found};return(yield this.performAutomatedDocumentChecks(o,i)).every(d=>d.status==="passed")&&(o.status="verified",o.verifiedBy="Automated System",o.verificationDate=new Date),yield this.auditService.logAdminAction("SYSTEM","document_service","DOCUMENT_UPLOADED","onboarding",e,!0,`Document uploaded: ${t}`,{documentId:o.id,integrityHash:r,duplicateCheck:n}),o})}processPayment(e,t,i){return s(this,null,function*(){let r=this.generateTransactionId();return yield this.auditService.logAdminAction("SYSTEM","payment_service","PAYMENT_PROCESSED","onboarding",e,!0,`Payment processed: ${i} UGX via ${t}`,{transactionId:r,amount:i,paymentMethod:t}),{success:!0,transactionId:r,receiptUrl:`https://payments.ugandamedicalregistry.com/receipts/${r}.pdf`}})}approveLicenseApplication(e,t,i){return s(this,null,function*(){let r=yield this.getApplication(e),n=yield this.generateLicenseNumber(r.professionalInfo.profession),o=yield this.generateDigitalCertificate(r,n),c=yield this.generateQrCode(n),d=yield this.blockchainService.recordLicenseAction(n,"LICENSE_ISSUED",t,"Initial license issuance after successful onboarding");return r.status="approved",r.licenseNumber=n,r.digitalCertHash=o,r.qrCode=c,r.reviewedBy=t,r.reviewedDate=new Date,r.reviewNotes.push(i),yield this.auditService.logAdminAction(t,"admin","LICENSE_ISSUED","practitioner",n,!0,i,{applicationId:e,digitalCertHash:o,qrCode:c,blockchainTxId:d}),{licenseNumber:n,digitalCertHash:o,qrCode:c,blockchainTxId:d.id}})}performAutomatedDocumentChecks(e,t){return s(this,null,function*(){let i=[];return i.push({type:"document_integrity",status:(yield this.verifyDocumentIntegrity(t))?"passed":"failed",result:{fileSize:t.size,mimeType:t.type},timestamp:new Date,confidence:.95}),i.push({type:"duplicate_detection",status:e.duplicateCheck?"passed":"failed",result:{duplicateFound:!e.duplicateCheck},timestamp:new Date,confidence:.98}),e.type==="degree"&&i.push({type:"qualification_verification",status:(yield this.verifyQualification(t))?"passed":"manual_review",result:{institutionRecognized:!0},timestamp:new Date,confidence:.85}),i})}verifyNationalId(e){return s(this,null,function*(){let t=e.length>=10&&/^[A-Z]{2}\d+$/.test(e);return{passed:t,reason:t?void 0:"Invalid national ID format"}})}checkSanctionsList(e,t){return s(this,null,function*(){return{passed:!0}})}verifyAge(e){return s(this,null,function*(){let t=new Date().getFullYear()-e.getFullYear(),i=t>=21&&t<=70;return{passed:i,reason:i?void 0:"Age outside acceptable range for medical practice"}})}checkDuplicateRegistration(e,t){return s(this,null,function*(){return{passed:!0}})}calculateKycScore(e){return e.filter(i=>i.passed).length/e.length*100}verifyDocumentIntegrity(e){return s(this,null,function*(){return e.size>0&&e.size<10*1024*1024})}checkDocumentDuplicates(e){return s(this,null,function*(){return{found:!1,existingDocuments:[]}})}verifyQualification(e){return s(this,null,function*(){return!0})}generateFileHash(e){return s(this,null,function*(){let t=yield e.arrayBuffer(),i=yield crypto.subtle.digest("SHA-256",t);return Array.from(new Uint8Array(i)).map(n=>n.toString(16).padStart(2,"0")).join("")})}generateLicenseNumber(e){return s(this,null,function*(){let i={"Medical Doctor":"UMC-UG",Nurse:"NMC-UG",Pharmacist:"PPC-UG",Dentist:"UMC-UG","Traditional Medicine":"TMPC-UG"}[e]||"UMR-UG",r=Math.floor(Math.random()*9999)+1e3;return`${i}-${r}`})}generateDigitalCertificate(e,t){return s(this,null,function*(){let i={licenseNumber:t,profession:e.professionalInfo.profession,specialty:e.professionalInfo.specialty,issuedDate:new Date().toISOString(),expiryDate:new Date(Date.now()+31536e6).toISOString()},n=new TextEncoder().encode(JSON.stringify(i)),o=yield crypto.subtle.digest("SHA-256",n);return Array.from(new Uint8Array(o)).map(d=>d.toString(16).padStart(2,"0")).join("")})}generateQrCode(e){return s(this,null,function*(){let t={licenseNumber:e,verificationUrl:`https://ugandamedicalregistry.com/verify/${e}`,timestamp:new Date().toISOString()};return`UMR_QR_${e}_${Date.now()}`})}getApplication(e){return s(this,null,function*(){return{}})}generateApplicationId(){return"APP_"+Date.now()+"_"+Math.random().toString(36).substr(2,9)}generateDocumentId(){return"DOC_"+Date.now()+"_"+Math.random().toString(36).substr(2,9)}generateTransactionId(){return"TXN_"+Date.now()+"_"+Math.random().toString(36).substr(2,9)}static \u0275fac=function(t){return new(t||a)};static \u0275prov=p({token:a,factory:a.\u0275fac,providedIn:"root"})};var w=class a{blockchainService=l(f);auditService=l(u);initiateRenewal(e,t){return s(this,null,function*(){let i=this.generateRenewalId(),r=yield this.checkCpdCompliance(e),n=yield this.calculateRenewalFees(e,r.deficient),o={id:i,licenseNumber:e,practitionerId:t,status:r.deficient?"cpd_check":"payment_pending",cpdStatus:r,paymentStatus:"pending",renewalFee:n.base,lateFee:n.late,totalAmount:n.total,submittedDate:new Date,webhookNotifications:[]};return yield this.auditService.logAdminAction(t,"practitioner","RENEWAL_INITIATED","license",e,!0,"License renewal process started",{renewalId:i,cpdStatus:r,fees:n}),o})}checkCpdCompliance(e){return s(this,null,function*(){let t={required:60,completed:52,verified:48,deficient:!1};return t.deficient=t.verified<t.required,yield this.auditService.logAdminAction("SYSTEM","cpd_service","CPD_COMPLIANCE_CHECK","license",e,!0,`CPD Status: ${t.verified}/${t.required} credits`,t),t})}processRenewalPayment(e,t){return s(this,null,function*(){let i=yield this.getRenewal(e),r=this.generateTransactionId(),n=yield this.processPayment(i.totalAmount,t);if(n.success){i.paymentStatus="paid",i.status="approved";let o=yield this.issueRenewalCertificate(i);i.digitalCertHash=o,i.newExpiryDate=new Date(Date.now()+365*24*60*60*1e3);let c=yield this.blockchainService.recordLicenseAction(i.licenseNumber,"LICENSE_RENEWED",i.practitionerId,"Annual license renewal completed");i.blockchainTxId=c.id,yield this.sendRenewalNotifications(i)}return yield this.auditService.logAdminAction(i.practitionerId,"practitioner","RENEWAL_PAYMENT_PROCESSED","license",i.licenseNumber,n.success,n.success?"Payment successful":"Payment failed",{renewalId:e,transactionId:r,amount:i.totalAmount}),{success:n.success,transactionId:r}})}sendRenewalNotifications(e){return s(this,null,function*(){let t=[{id:this.generateNotificationId(),type:"employer",endpoint:"https://mulago.go.ug/api/webhooks/license-renewal",status:"pending",payload:{licenseNumber:e.licenseNumber,status:"renewed",expiryDate:e.newExpiryDate,digitalCertHash:e.digitalCertHash},retryCount:0},{id:this.generateNotificationId(),type:"facility",endpoint:"https://facilities.ugandamedicalregistry.com/api/webhooks/staff-update",status:"pending",payload:{licenseNumber:e.licenseNumber,status:"renewed",expiryDate:e.newExpiryDate},retryCount:0}];for(let i of t)try{yield this.sendWebhook(i),i.status="sent",i.sentDate=new Date,i.responseCode=200}catch{i.status="failed",i.retryCount++}e.webhookNotifications=t,yield this.auditService.logAdminAction("SYSTEM","webhook_service","RENEWAL_NOTIFICATIONS_SENT","license",e.licenseNumber,!0,`Sent ${t.length} webhook notifications`,{notifications:t.map(i=>({type:i.type,status:i.status}))})})}calculateRenewalFees(e,t){return s(this,null,function*(){let r=this.isLateRenewal(e)?112500:0,n=t?2e5:0;return{base:45e4,late:r,cpdPenalty:n,total:45e4+r+n}})}isLateRenewal(e){return Math.random()>.8}issueRenewalCertificate(e){return s(this,null,function*(){let t={licenseNumber:e.licenseNumber,renewalDate:new Date().toISOString(),expiryDate:e.newExpiryDate?.toISOString(),renewalId:e.id},r=new TextEncoder().encode(JSON.stringify(t)),n=yield crypto.subtle.digest("SHA-256",r);return Array.from(new Uint8Array(n)).map(c=>c.toString(16).padStart(2,"0")).join("")})}processPayment(e,t){return s(this,null,function*(){return{success:Math.random()>.05}})}sendWebhook(e){return s(this,null,function*(){console.log(`Sending webhook to ${e.endpoint}:`,e.payload)})}getRenewal(e){return s(this,null,function*(){return{}})}generateRenewalId(){return"REN_"+Date.now()+"_"+Math.random().toString(36).substr(2,9)}generateTransactionId(){return"TXN_"+Date.now()+"_"+Math.random().toString(36).substr(2,9)}generateNotificationId(){return"WHK_"+Date.now()+"_"+Math.random().toString(36).substr(2,9)}static \u0275fac=function(t){return new(t||a)};static \u0275prov=p({token:a,factory:a.\u0275fac,providedIn:"root"})};var b=class a{blockchainService=l(f);auditService=l(u);createInvestigationCase(e){return s(this,null,function*(){let t=this.generateCaseId(),i={id:t,type:e.type,priority:e.priority,status:"new",title:e.title,description:e.description,reportedBy:e.reportedBy,reportedDate:new Date,investigationNotes:[],evidence:[],qrChecks:[],notifications:[]};return e.practitionerLicense&&(i.practitioner=yield this.getPractitionerInfo(e.practitionerLicense)),e.facilityLicense&&(i.facility=yield this.getFacilityInfo(e.facilityLicense)),yield this.auditService.logAdminAction("SYSTEM","investigation_service","CASE_CREATED","investigation",t,!0,`New ${e.type} case created`,{priority:e.priority,reportedBy:e.reportedBy}),i})}assignInspector(e,t,i){return s(this,null,function*(){let r=yield this.getCase(e);r.assignedTo=t,r.assignedDate=new Date,r.status="assigned",yield this.auditService.logAdminAction(i,"admin","CASE_ASSIGNED","investigation",e,!0,`Case assigned to inspector ${t}`,{inspectorId:t,assignedBy:i}),yield this.sendInspectorNotification(r,t)})}performQrCheck(e,t,i,r,n){return s(this,null,function*(){let o={id:this.generateQrCheckId(),location:t,timestamp:new Date,qrCode:i,verificationResult:yield this.verifyQrCode(i),performedBy:r,gpsCoordinates:n,photos:[]};return yield this.auditService.logAdminAction(r,"inspector","QR_VERIFICATION_PERFORMED","investigation",e,!0,`On-site QR verification at ${t}`,{qrCheckId:o.id,verificationResult:o.verificationResult,location:t,gpsCoordinates:n}),o})}uploadEvidence(e,t,i,r,n){return s(this,null,function*(){let o=yield this.generateFileHash(i),c={id:this.generateEvidenceId(),type:t,name:i.name,description:r,uploadedBy:n,uploadDate:new Date,integrityHash:o,chainOfCustody:[{timestamp:new Date,action:"collected",performedBy:n,location:"Field Investigation",notes:r}]};return yield this.auditService.logAdminAction(n,"inspector","EVIDENCE_UPLOADED","investigation",e,!0,`Evidence uploaded: ${t}`,{evidenceId:c.id,fileName:i.name,fileSize:i.size,integrityHash:o}),c})}makeInvestigationDecision(e,t,i,r,n,o){return s(this,null,function*(){let c=yield this.getCase(e),d={decision:t,reason:i,effectiveDate:new Date,duration:n,conditions:o,appealDeadline:new Date(Date.now()+30*24*60*60*1e3),decidedBy:r,decisionDate:new Date};if(["license_suspended","license_revoked"].includes(t)){let m=yield this.blockchainService.recordLicenseAction(c.practitioner.licenseNumber,t==="license_suspended"?"LICENSE_SUSPENDED":"LICENSE_REVOKED",r,i);d.blockchainTxId=m.id}return c.decision=d,c.status="closed",c.practitioner&&(yield this.createPublicStatusUpdate(c,d)),yield this.sendDecisionNotifications(c,d),yield this.auditService.logAdminAction(r,"admin","INVESTIGATION_DECISION_MADE","investigation",e,!0,`Decision: ${t} - ${i}`,{decision:t,effectiveDate:d.effectiveDate,blockchainTxId:d.blockchainTxId}),d})}createPublicStatusUpdate(e,t){return s(this,null,function*(){let i={id:this.generateStatusUpdateId(),licenseNumber:e.practitioner.licenseNumber,newStatus:this.mapDecisionToStatus(t.decision),effectiveDate:t.effectiveDate,publicReason:this.sanitizeReasonForPublic(t.reason),publishedDate:new Date,publishedBy:t.decidedBy};return e.publicStatusUpdate=i,yield this.auditService.logAdminAction(t.decidedBy,"admin","PUBLIC_STATUS_UPDATED","practitioner",e.practitioner.licenseNumber,!0,`Public status updated: ${i.newStatus}`,{statusUpdateId:i.id,effectiveDate:i.effectiveDate}),i})}sendDecisionNotifications(e,t){return s(this,null,function*(){let i=[];this.isInternationalPractitioner(e.practitioner?.licenseNumber)&&i.push({id:this.generateNotificationId(),type:"embassy",recipient:"embassies@ugandamedicalregistry.com",subject:`License Status Change - ${e.practitioner?.licenseNumber}`,content:`The license status for ${e.practitioner?.name} has been updated to ${t.decision}. Effective date: ${t.effectiveDate.toISOString()}`,status:"pending",priority:t.decision.includes("revoked")?"urgent":"normal"}),e.practitioner?.facility&&i.push({id:this.generateNotificationId(),type:"employer",recipient:e.practitioner.facility,subject:`Staff License Status Update - ${e.practitioner.licenseNumber}`,content:`License status updated for ${e.practitioner.name}. New status: ${t.decision}. Please review employment status accordingly.`,status:"pending",priority:"urgent"});for(let r of i)try{yield this.sendNotification(r),r.status="sent",r.sentDate=new Date}catch{r.status="failed"}e.notifications=i,yield this.auditService.logAdminAction("SYSTEM","notification_service","DECISION_NOTIFICATIONS_SENT","investigation",e.id,!0,`Sent ${i.length} decision notifications`,{notifications:i.map(r=>({type:r.type,status:r.status}))})})}verifyQrCode(e){return s(this,null,function*(){let t=[{valid:!0,licenseNumber:"UMC-UG-2458",practitionerName:"Dr. Yusuf AbdulHakim Addo",status:"active",discrepancies:[]},{valid:!1,discrepancies:["QR code expired","License suspended"]}];return t[Math.floor(Math.random()*t.length)]})}mapDecisionToStatus(e){return{cleared:"active",warning_issued:"active_with_warning",license_suspended:"suspended",license_revoked:"revoked",criminal_referral:"under_investigation"}[e]||"under_review"}sanitizeReasonForPublic(e){return e.replace(/\b\d{10,}\b/g,"[REDACTED]").replace(/\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Z|a-z]{2,}\b/g,"[EMAIL_REDACTED]")}isInternationalPractitioner(e){return Math.random()>.7}getPractitionerInfo(e){return s(this,null,function*(){return{name:"Dr. John Doe",licenseNumber:e,facility:"General Hospital"}})}getFacilityInfo(e){return s(this,null,function*(){return{name:"General Hospital",licenseNumber:e,region:"Central"}})}getCase(e){return s(this,null,function*(){return{}})}sendNotification(e){return s(this,null,function*(){console.log(`Sending notification to ${e.recipient}:`,e.subject)})}sendInspectorNotification(e,t){return s(this,null,function*(){let i={id:this.generateNotificationId(),type:"public",recipient:t,subject:`New Case Assignment: ${e.title}`,content:`You have been assigned to investigate case ${e.id}. Priority: ${e.priority}`,status:"pending",priority:e.priority==="critical"?"urgent":"normal"};yield this.sendNotification(i)})}generateFileHash(e){return s(this,null,function*(){let t=yield e.arrayBuffer(),i=yield crypto.subtle.digest("SHA-256",t);return Array.from(new Uint8Array(i)).map(n=>n.toString(16).padStart(2,"0")).join("")})}generateCaseId(){return"INV_"+new Date().getFullYear()+"_"+String(Math.floor(Math.random()*9999)).padStart(4,"0")}generateQrCheckId(){return"QR_"+Date.now()+"_"+Math.random().toString(36).substr(2,9)}generateEvidenceId(){return"EVD_"+Date.now()+"_"+Math.random().toString(36).substr(2,9)}generateStatusUpdateId(){return"PSU_"+Date.now()+"_"+Math.random().toString(36).substr(2,9)}generateNotificationId(){return"NOT_"+Date.now()+"_"+Math.random().toString(36).substr(2,9)}static \u0275fac=function(t){return new(t||a)};static \u0275prov=p({token:a,factory:a.\u0275fac,providedIn:"root"})};var S=class a{auditService=l(u);dlpService=l(R);processBulkVerification(e,t,i,r){return s(this,null,function*(){let n=this.generateJobId(),o={id:n,employerId:e,organizationName:t,jobType:r,status:"processing",submittedDate:new Date,totalRecords:i.length,processedRecords:0,results:[],monitoringEnabled:!0,complianceReportSchedule:"monthly",nextComplianceReport:new Date(Date.now()+30*24*60*60*1e3)};for(let c of i){let d=yield this.verifyStaffMember(c);o.results.push(d),o.processedRecords++}return o.status="completed",o.completedDate=new Date,yield this.enableAutoMonitoring(o),yield this.auditService.logAdminAction(e,"employer","BULK_VERIFICATION_COMPLETED","staff_verification",n,!0,`Bulk verification completed: ${o.processedRecords}/${o.totalRecords} processed`,{organizationName:t,totalRecords:o.totalRecords,successfulVerifications:o.results.filter(c=>c.status==="verified").length,failedVerifications:o.results.filter(c=>c.status!=="verified").length}),o})}enableAutoMonitoring(e){return s(this,null,function*(){for(let t of e.results)t.status==="verified"&&(yield this.setupStaffMonitoring(e.employerId,t));yield this.auditService.logAdminAction("SYSTEM","monitoring_service","AUTO_MONITORING_ENABLED","staff_verification",e.id,!0,`Auto-monitoring enabled for ${e.results.length} staff members`,{employerId:e.employerId,monitoredStaff:e.results.length})})}generateComplianceReport(e,t){return s(this,null,function*(){let i=this.generateReportId(),r=yield this.calculateComplianceMetrics(e,t),n=yield this.performRiskAssessment(r),o={id:i,employerId:e,reportPeriod:t,metrics:r,riskAssessment:n,generatedDate:new Date,generatedBy:"Automated Compliance System"};return yield this.auditService.logAdminAction("SYSTEM","compliance_service","COMPLIANCE_REPORT_GENERATED","compliance",i,!0,`Monthly compliance report generated for employer ${e}`,{reportPeriod:t,complianceRate:r.complianceRate,overallRisk:n.overallRisk}),o})}verifyStaffMember(e){return s(this,null,function*(){let t=["verified","suspended","revoked","expired","not_found"],i=t[Math.floor(Math.random()*t.length)];return{staffName:e.name,licenseNumber:e.licenseNumber,status:i,expiryDate:i==="verified"?new Date(Date.now()+365*24*60*60*1e3):void 0,facility:"Current Employer",specialty:"General Practice",cpdStatus:i==="verified"?{current:Math.floor(Math.random()*60)+20,required:60,compliant:Math.random()>.3}:void 0,riskFlags:this.generateRiskFlags(i),lastVerified:new Date,monitoringAlerts:[]}})}setupStaffMonitoring(e,t){return s(this,null,function*(){if(console.log(`Setting up monitoring for ${t.staffName} (${t.licenseNumber})`),t.expiryDate){let i=Math.floor((t.expiryDate.getTime()-Date.now())/864e5);i<=90&&t.monitoringAlerts.push({id:this.generateAlertId(),type:"expiry_warning",severity:i<=30?"critical":i<=60?"high":"medium",message:`License expires in ${i} days`,actionRequired:"Ensure renewal application is submitted",deadline:t.expiryDate,acknowledged:!1,createdDate:new Date})}t.cpdStatus&&!t.cpdStatus.compliant&&t.monitoringAlerts.push({id:this.generateAlertId(),type:"cpd_deficient",severity:"medium",message:`CPD credits below threshold: ${t.cpdStatus.current}/${t.cpdStatus.required}`,actionRequired:"Arrange additional CPD training",acknowledged:!1,createdDate:new Date})})}calculateComplianceMetrics(e,t){return s(this,null,function*(){let i=Math.floor(Math.random()*1e3)+500,r=Math.floor(i*.92);return{totalStaff:i,verifiedStaff:r,complianceRate:r/i*100,expiringIn30Days:Math.floor(i*.05),expiringIn60Days:Math.floor(i*.08),expiringIn90Days:Math.floor(i*.12),suspendedStaff:Math.floor(i*.01),revokedStaff:Math.floor(i*.005),cpdCompliantStaff:Math.floor(i*.78)}})}performRiskAssessment(e){return s(this,null,function*(){let t=[],i=[];return e.complianceRate<90&&(t.push("Low overall compliance rate"),i.push("Implement regular staff verification audits")),e.expiringIn30Days>e.totalStaff*.1&&(t.push("High number of licenses expiring soon"),i.push("Set up automated renewal reminders")),e.suspendedStaff+e.revokedStaff>e.totalStaff*.02&&(t.push("High number of suspended/revoked staff"),i.push("Review hiring and monitoring procedures")),{overallRisk:t.length>=3?"high":t.length>=2?"medium":"low",riskFactors:t,recommendations:i}})}generateRiskFlags(e){let t=[];return e==="suspended"&&t.push("License currently suspended"),e==="revoked"&&t.push("License revoked"),e==="expired"&&t.push("License expired"),e==="not_found"&&t.push("License not found in registry"),t}generateJobId(){return"BVJ_"+Date.now()+"_"+Math.random().toString(36).substr(2,9)}generateReportId(){return"CR_"+Date.now()+"_"+Math.random().toString(36).substr(2,9)}generateAlertId(){return"ALT_"+Date.now()+"_"+Math.random().toString(36).substr(2,9)}static \u0275fac=function(t){return new(t||a)};static \u0275prov=p({token:a,factory:a.\u0275fac,providedIn:"root"})};var D=class a{blockchainService=l(f);auditService=l(u);processVerificationRequest(e,t,i,r,n,o,c){return s(this,null,function*(){let d=this.generateRequestId(),m={id:d,embassyId:e,embassyName:t,country:i,licenseNumber:r,verificationPurpose:n,requestedBy:o,department:c,requestDate:new Date,status:"pending",auditTrail:[]};m.auditTrail.push({timestamp:new Date,action:"VERIFICATION_REQUEST_CREATED",performedBy:o,details:`Verification request for ${r} - Purpose: ${n}`,ipAddress:yield this.getCurrentIpAddress(),sessionId:this.getCurrentSessionId()});let C=yield this.verifyPractitioner(r);return C?(m.status="verified",m.verificationResult=C,m.practitionerName=C.practitionerName):m.status="not_found",yield this.auditService.logAdminAction(o,"embassy_user","EMBASSY_VERIFICATION_REQUEST","practitioner",r,m.status==="verified",`Embassy verification: ${t} (${i})`,{requestId:d,purpose:n,department:c,verificationResult:m.status}),m})}generateOfficialLetter(e,t){return s(this,null,function*(){let i=yield this.getVerificationRequest(e);if(!i.verificationResult)throw new Error("Cannot generate letter for unverified practitioner");let r=this.generateLetterId(),n=this.generateLetterReference(i.embassyName,i.country),o=yield this.generateLetterQrCode(r,i.verificationResult),c=yield this.generateDigitalSignature(i.verificationResult,r),d={id:r,letterReference:n,embassyLetterhead:yield this.getEmbassyLetterhead(i.embassyName),practitionerDetails:i.verificationResult,verificationStatement:this.generateVerificationStatement(i),issuedDate:new Date,validityPeriod:90,expiryDate:new Date(Date.now()+90*24*60*60*1e3),issuedBy:t,digitalSignature:c,qrCode:o,securityFeatures:{watermark:!0,tamperProof:!0,blockchainVerified:!0},downloadCount:0};return i.officialLetter=d,i.auditTrail.push({timestamp:new Date,action:"OFFICIAL_LETTER_GENERATED",performedBy:t,details:`Official verification letter generated: ${n}`,ipAddress:yield this.getCurrentIpAddress(),sessionId:this.getCurrentSessionId()}),yield this.auditService.logAdminAction(t,"embassy_user","OFFICIAL_LETTER_GENERATED","verification_letter",r,!0,`Official letter generated: ${n}`,{requestId:e,letterReference:n,practitionerLicense:i.licenseNumber,validityPeriod:d.validityPeriod}),d})}logVerificationEvent(e,t,i,r){return s(this,null,function*(){let n=yield this.getVerificationRequest(e);n.auditTrail.push({timestamp:new Date,action:t,performedBy:i,details:r,ipAddress:yield this.getCurrentIpAddress(),sessionId:this.getCurrentSessionId()}),yield this.auditService.logAdminAction(i,"embassy_user",t,"embassy_verification",e,!0,r,{embassyName:n.embassyName,country:n.country,licenseNumber:n.licenseNumber})})}trackLetterAccess(e,t,i){return s(this,null,function*(){let r=yield this.getOfficialLetter(e);t==="download"&&r.downloadCount++,r.lastAccessed=new Date,yield this.auditService.logAdminAction(i,"embassy_user",`LETTER_${t.toUpperCase()}`,"verification_letter",e,!0,`Official letter ${t}: ${r.letterReference}`,{letterReference:r.letterReference,downloadCount:r.downloadCount,accessType:t})})}verifyPractitioner(e){return s(this,null,function*(){return[{licenseNumber:"UMC-UG-2458",practitionerName:"Dr. Yusuf AbdulHakim Addo",profession:"Medical Doctor",specialty:"Cardiology",licenseStatus:"active",registrationDate:new Date("2023-01-15"),expiryDate:new Date("2025-12-31"),primaryFacility:"Mulago National Referral Hospital",region:"Central Region (Kampala)",qualifications:[{degree:"Doctor of Medicine (MBChB)",institution:"Makerere University",year:2012,country:"Uganda",verified:!0}],disciplinaryHistory:[],scopeOfPractice:["General Medicine","Cardiology","Interventional Cardiology"],verificationTimestamp:new Date,blockchainHash:"blockchain_hash_123"}].find(i=>i.licenseNumber===e)||null})}generateVerificationStatement(e){let t=e.verificationResult;return`This is to certify that ${t.practitionerName} (License: ${t.licenseNumber}) is a duly registered ${t.profession} with the Uganda Medical Registry. The license is currently ${t.licenseStatus} and valid until ${t.expiryDate.toDateString()}. This verification is issued for ${e.verificationPurpose.replace("_"," ")} purposes and is valid for 90 days from the date of issuance.`}generateLetterQrCode(e,t){return s(this,null,function*(){let i={letterId:e,licenseNumber:t.licenseNumber,verificationUrl:`https://ugandamedicalregistry.com/verify/letter/${e}`,timestamp:new Date().toISOString()};return`LETTER_QR_${e}_${Date.now()}`})}generateDigitalSignature(e,t){return s(this,null,function*(){let i={letterId:t,licenseNumber:e.licenseNumber,practitionerName:e.practitionerName,timestamp:new Date().toISOString()},n=new TextEncoder().encode(JSON.stringify(i)),o=yield crypto.subtle.digest("SHA-256",n);return Array.from(new Uint8Array(o)).map(d=>d.toString(16).padStart(2,"0")).join("")})}getEmbassyLetterhead(e){return s(this,null,function*(){return`Official letterhead for ${e}`})}generateLetterReference(e,t){let i=t.substring(0,2).toUpperCase(),r=Math.floor(Math.random()*9999)+1e3;return`${i}E-VL-${new Date().getFullYear()}-${r}`}getCurrentIpAddress(){return s(this,null,function*(){return"192.168.1.100"})}getCurrentSessionId(){return"SESSION_"+Math.random().toString(36).substr(2,9)}getVerificationRequest(e){return s(this,null,function*(){return{}})}getOfficialLetter(e){return s(this,null,function*(){return{}})}generateRequestId(){return"EVR_"+Date.now()+"_"+Math.random().toString(36).substr(2,9)}generateLetterId(){return"OVL_"+Date.now()+"_"+Math.random().toString(36).substr(2,9)}static \u0275fac=function(t){return new(t||a)};static \u0275prov=p({token:a,factory:a.\u0275fac,providedIn:"root"})};var N=class a{onboardingService=l(v);renewalService=l(w);investigationService=l(b);employerService=l(S);embassyService=l(D);auditService=l(u);activeWorkflows=new Map;orchestratePractitionerOnboarding(e,t,i){return s(this,null,function*(){let r=this.generateWorkflowId(),n={workflowId:r,type:"onboarding",status:"initiated",currentStep:"account_creation",totalSteps:6,completedSteps:0,estimatedCompletion:new Date(Date.now()+14*24*60*60*1e3),lastUpdated:new Date,metadata:{applicantId:e.userId}};this.activeWorkflows.set(r,n);try{n.currentStep="account_creation";let o=yield this.onboardingService.createOnboardingApplication(e);n.completedSteps=1,n.metadata.applicationId=o.id,n.currentStep="kyc_verification";let c=yield this.onboardingService.performKycVerification(o.id);if(n.completedSteps=2,n.metadata.kycResult=c,!c.success)return n.status="failed",n.metadata.failureReason="KYC verification failed",n;n.currentStep="document_verification";for(let C of t)yield this.onboardingService.uploadDocument(o.id,"degree",C);n.completedSteps=3,n.currentStep="payment_processing";let d=yield this.onboardingService.processPayment(o.id,i,45e4);if(n.completedSteps=4,n.metadata.paymentResult=d,!d.success)return n.status="failed",n.metadata.failureReason="Payment processing failed",n;n.currentStep="human_review",yield this.simulateHumanReview(o.id),n.completedSteps=5,n.currentStep="license_issuance";let m=yield this.onboardingService.approveLicenseApplication(o.id,"SYSTEM_ADMIN","Application approved after successful verification");n.completedSteps=6,n.metadata.licenseResult=m,n.status="completed",n.currentStep="completed"}catch(o){n.status="failed",n.metadata.error=o instanceof Error?o.message:"Unknown error"}return n.lastUpdated=new Date,n})}orchestrateRenewal(e,t,i){return s(this,null,function*(){let r=this.generateWorkflowId(),n={workflowId:r,type:"renewal",status:"initiated",currentStep:"cpd_check",totalSteps:4,completedSteps:0,estimatedCompletion:new Date(Date.now()+7*24*60*60*1e3),lastUpdated:new Date,metadata:{licenseNumber:e,practitionerId:t}};this.activeWorkflows.set(r,n);try{let o=yield this.renewalService.initiateRenewal(e,t);n.completedSteps=1,n.metadata.renewalId=o.id,n.currentStep="payment_processing";let c=yield this.renewalService.processRenewalPayment(o.id,i);if(n.completedSteps=2,!c.success)return n.status="failed",n.metadata.failureReason="Payment failed",n;n.currentStep="certificate_issuance",n.completedSteps=3,n.currentStep="notifications",n.completedSteps=4,n.status="completed"}catch(o){n.status="failed",n.metadata.error=o instanceof Error?o.message:"Unknown error"}return n.lastUpdated=new Date,n})}getWorkflowStatus(e){return this.activeWorkflows.get(e)}getWorkflowMetrics(){return s(this,null,function*(){return{onboarding:{totalApplications:1247,approvalRate:87.5,averageProcessingTime:12,currentBacklog:89},renewals:{totalRenewals:8934,onTimeRenewalRate:78.2,averageProcessingTime:3,cpdComplianceRate:82.1},investigations:{totalCases:156,resolutionRate:94.2,averageResolutionTime:21,suspensionRate:12.8,revocationRate:3.2},verifications:{totalVerifications:45678,embassyVerifications:2847,employerVerifications:42831,averageResponseTime:1.2}}})}cancelWorkflow(e,t,i){return s(this,null,function*(){let r=this.activeWorkflows.get(e);r&&(r.status="cancelled",r.metadata.cancellationReason=t,r.metadata.cancelledBy=i,r.lastUpdated=new Date,yield this.auditService.logAdminAction(i,"admin","WORKFLOW_CANCELLED","workflow",e,!0,t,{workflowType:r.type,currentStep:r.currentStep}))})}simulateHumanReview(e){return s(this,null,function*(){yield new Promise(t=>setTimeout(t,1e3)),yield this.auditService.logAdminAction("HUMAN_REVIEWER","admin","APPLICATION_REVIEWED","onboarding",e,!0,"Application passed human review",{reviewDuration:1e3,reviewOutcome:"approved"})})}generateWorkflowId(){return"WF_"+Date.now()+"_"+Math.random().toString(36).substr(2,9)}static \u0275fac=function(t){return new(t||a)};static \u0275prov=p({token:a,factory:a.\u0275fac,providedIn:"root"})};var P=class a{static \u0275fac=function(t){return new(t||a)};static \u0275mod=y({type:a});static \u0275inj=h({providers:[v,w,b,S,D,N],imports:[L,j]})};var _=class a{static \u0275fac=function(t){return new(t||a)};static \u0275mod=y({type:a,bootstrap:[k]});static \u0275inj=h({providers:[V($()),{provide:U,useClass:E,multi:!0}],imports:[B,A,W,P]})};H().bootstrapModule(_,{ngZoneEventCoalescing:!0}).catch(a=>console.error(a));
